### 카메라-라이다 이미지 동기화 툴 기능 명세서 (Camera-LiDAR Image Synchronization Tool Feature Specification)

**1. 프로그램 개요**
   *   **목표:** 프레임 수가 서로 다른 두 카메라(A5, A6)의 영상 이미지들을 사용자가 시각적으로 비교하며 쌍(pair)을 맞춰 저장하는 Python 기반 GUI 툴.
   *   **사용 라이브러리:** PyQt5를 활용한 GUI.

**2. 실행 및 초기 설정**
   *   **실행 방식:**
       *   스크립트 실행 시 동기화할 이미지 폴더의 상위 경로를 명령줄 인자(argument)로 받을 수 있다.
           *   예시: `python sync_tool.py "Y:\path\to\parent_folder"`
       *   명령줄 인자가 없을 경우, 파일 대화 상자를 통해 사용자가 직접 상위 폴더를 선택할 수 있도록 한다. 기본 경로(`Y:\adasip\Temp\20250711_LC_test\20250711_A6_A5_LC_test\ncdb_a6_dataset\2025_07_11`)가 존재하면 이를 초기 경로로 제시한다.
       *   폴더 선택이 취소되거나, 프로그램 초기화 중 오류가 발생하면 프로그램이 종료된다.
   *   **필수 폴더 구조:** 지정된 상위 경로 내에 `image_a5`, `image_a6`, `pcd` 폴더가 반드시 존재해야 한다. 이 중 하나라도 없을 경우 프로그램 실행이 중단되고 사용자에게 오류 메시지를 표시해야 한다.
   *   **프레임 오프셋 파일 (`frame_offset.txt`):**
       *   상위 경로 내에 `frame_offset.txt` 파일이 반드시 존재해야 한다. 파일이 없을 경우 프로그램 실행이 중단되고 사용자에게 오류 메시지를 표시해야 한다.
       *   `frame_offset.txt` 파일은 다음 형식으로 A5 및 A6 카메라의 시작 및 끝 프레임 번호를 포함해야 한다:
           ```
           a5_start <숫자>
           a6_start <숫자>
           a5_end <숫자>
           a6_end <숫자>
           ```
       *   파일 내용 파싱 중 오류가 발생할 경우 사용자에게 오류 메시지를 표시하고 프로그램 실행을 중단해야 한다.
       *   A5와 A6의 총 프레임 수 비율(`a5_total / a6_total`)을 계산하여 내부적으로 유지한다.
   *   **이미지 로드 및 필터링:**
       *   `image_a5` 및 `image_a6` 폴더에서 이미지 파일(PNG, JPG, JPEG, BMP, GIF)을 로드해야 한다.
       *   `image_a5` 이미지는 `pcd` 폴더 내의 파일 이름(확장자 제외)과 일치하는 이미지만을 필터링하여 사용해야 한다.
       *   로드된 이미지 목록이 비어있거나, 필터링 후 `pcd`와 매칭되는 A5 이미지가 없을 경우 사용자에게 오류 메시지를 표시하고 프로그램 실행을 중단해야 한다.
       *   `frame_offset.txt`에 지정된 시작 및 끝 프레임 번호에 해당하는 이미지가 (필터링된 목록에서) 없을 경우 사용자에게 오류 메시지를 표시하고 프로그램 실행을 중단해야 한다.
   *   **초기 화면 표시:** 프로그램 실행 시 `frame_offset.txt`에 지정된 시작 프레임에 해당하는 A5 및 A6 이미지를 화면에 표시해야 한다.

**3. 사용자 인터페이스 (GUI)**
   *   **메인 윈도우:**
       *   "이미지 동기화 툴"이라는 제목을 가지며, 적절한 초기 크기(예: 1000x600)와 위치로 표시되어야 한다.
       *   중앙 위젯에 이미지 패널 레이아웃을 포함한다.
   *   **이미지 패널:**
       *   왼쪽 패널은 `image_a5` 이미지를, 오른쪽 패널은 `image_a6` 이미지를 표시한다.
       *   각 이미지 상단에는 현재 표시된 이미지의 원본 파일명을 중앙 정렬하여 텍스트로 출력해야 한다.
       *   두 이미지의 크기가 다르더라도, 각 패널의 크기에 맞춰 이미지가 자동으로 동일하게 리사이즈되어야 하며, 종횡비를 유지해야 한다.
       *   이미지 로드 실패 시 해당 패널에 "이미지 로드 실패" 메시지를 표시한다.
   *   **상태 바:**
       *   현재 저장된 쌍의 개수, 현재 A5 및 A6 이미지의 프레임 번호를 표시한다.
       *   마지막 작업(예: "성공: ID X번 쌍 저장!")에 대한 상태 메시지를 추가로 표시한다.
   *   **매핑 데이터 창 (`MappingWindow`):**
       *   "매핑 데이터"라는 제목을 가진 독립적인 창으로 제공되며, 메인 윈도우의 오른쪽에 위치한다.
       *   메인 윈도우가 표시될 때 함께 표시되고, 메인 윈도우가 닫힐 때 함께 닫힌다.
       *   테이블 형태로 매핑된 데이터를 표시하며, 다음 4개의 열을 포함한다: "ID", "파일명", "A5 원본", "A6 원본".
       *   테이블의 열 너비는 자동으로 조정되어야 한다.
       *   테이블의 내용은 편집할 수 없어야 한다.
       *   매핑 데이터가 업데이트될 때마다 테이블 내용이 갱신되고, 가장 최근 항목이 보이도록 스크롤된다.
       *   매핑 테이블의 특정 행을 클릭하면 해당 쌍의 이미지로 보기 모드에서 이동할 수 있어야 한다.

**4. 핵심 기능**
   *   **이미지 탐색 (동기화 모드):**
       *   **A5 카메라 (왼쪽 이미지) 제어:**
           *   `Q` 키: 이전 A5 프레임으로 이동.
           *   `E` 키: 다음 A5 프레임으로 이동.
           *   프레임 번호는 `frame_offset.txt`에 지정된 `a5_start`와 `a5_end` 범위 내에서 순환해야 한다.
       *   **A6 카메라 (오른쪽 이미지) 제어:**
           *   `A` 키: 이전 A6 프레임으로 이동.
           *   `D` 키: 다음 A6 프레임으로 이동.
           *   프레임 번호는 `frame_offset.txt`에 지정된 `a6_start`와 `a6_end` 범위 내에서 순환해야 한다.
           *   A6 이미지를 변경할 때마다 `frame_offset.txt`의 프레임 비율을 기반으로 A5 이미지가 자동으로 가장 가까운 프레임으로 업데이트되어야 한다.
   *   **이미지 쌍 저장:**
       *   `Enter` 키 (또는 `Return` 키): 현재 화면에 보이는 A5와 A6 이미지를 한 쌍으로 매칭하여 저장한다.
       *   **저장 경로:** 원본 상위 폴더 내에 `synced_data` 폴더를 생성하고, 그 안에 `image_a5`와 `image_a6` 폴더를 각각 생성하여 이미지를 저장한다.
       *   **파일명 규칙:** 저장되는 파일명은 `0`부터 시작하는 10자리 숫자 형식(zero-padding)으로 순차적으로 통일한다. (예: `0000000000.png`, `0000000001.png`, ...)
       *   **중복 저장 방지:** 현재 선택된 A5 또는 A6 원본 이미지가 이미 다른 쌍에 포함되어 있다면 저장을 허용하지 않고 사용자에게 경고 메시지를 표시한다.
       *   **시각적 구분:** 현재 동기화 모드에서 표시되는 원본 이미지 중 이미 저장된 이미지(즉, `synced_data`에 복사된 적이 있는 원본 이미지)는 초록색 테두리로 시각적으로 구분되어야 한다.
       *   파일 복사 중 오류가 발생할 경우 사용자에게 오류 메시지를 표시해야 한다.
   *   **매핑 정보 관리:**
       *   **JSON 파일 저장:** `synced_data` 폴더 내에 `mapping_data.json` 파일을 생성하여 모든 매핑 정보를 JSON 배열 형태로 기록한다. JSON 파일은 가독성을 위해 들여쓰기(indent=2)되어야 하며, 유니코드 문자를 올바르게 처리해야 한다.
       *   **JSON 데이터 구조:** 각 쌍의 정보는 `id` (순차적 숫자), `new_filename` (새로 저장된 파일명), `a5_original_path` (A5 원본 이미지의 절대 경로), `a6_original_path` (A6 원본 이미지의 절대 경로)를 포함해야 한다.
       *   **데이터 연속성:** 프로그램 재시작 시 `mapping_data.json` 파일이 존재하면, 해당 데이터를 불러와 마지막에 저장된 다음 번호부터 작업을 이어갈 수 있도록 `sync_counter`를 초기화한다. JSON 파일 로드 중 오류가 발생할 경우 경고 메시지를 표시하고 초기 상태(ID 0부터 시작)로 시작한다.
       *   **마지막 쌍 삭제:** `Backspace` 키: 가장 마지막에 저장된 매핑 정보(JSON 내 마지막 항목)와 해당 이미지 파일(synced_data 폴더 안의 A5 및 A6 이미지)을 삭제한다.
           *   삭제할 쌍이 없을 경우 사용자에게 정보 메시지를 표시한다.
           *   삭제 전 사용자에게 "가장 마지막 쌍을 삭제하시겠습니까?"라는 확인 메시지를 표시해야 한다.
           *   삭제 후 `sync_counter`를 삭제된 쌍의 ID로 되돌려 다음 저장 시 해당 ID부터 다시 사용할 수 있도록 한다.
           *   삭제 후 매핑 데이터 창의 테이블을 업데이트하고, 상태 바에 성공 메시지를 표시한다.
           *   만약 보기 모드에서 마지막 쌍을 삭제하여 더 이상 저장된 쌍이 없다면, 자동으로 동기화 모드로 전환한다.
   *   **보기 모드 (View Mode):**
       *   `V` 키: '동기화 모드'와 '보기 모드'를 전환한다.
       *   저장된 쌍이 하나도 없을 경우 보기 모드로 전환할 수 없으며, 사용자에게 정보 메시지를 표시해야 한다.
       *   보기 모드에서는 `A` 키(이전 쌍)와 `D` 키(다음 쌍)를 사용하여 저장된 쌍들을 탐색할 수 있다.
       *   보기 모드에서 이미지는 `synced_data` 폴더 내의 복사된 이미지를 표시한다.
       *   보기 모드에서 탐색 시 매핑 데이터 창의 테이블에서 해당 행이 선택되어야 한다.
   *   **홈 상태 이동:**
       *   `H` 키:
           *   보기 모드일 경우, 가장 마지막에 저장된 쌍으로 이동한다.
           *   동기화 모드일 경우, 가장 마지막에 저장된 쌍의 원본 이미지 위치로 이동한다. 만약 마지막 저장 파일을 찾을 수 없다면 초기 상태(시작 프레임)로 복귀한다.
           *   저장된 쌍이 없을 경우 초기 상태(시작 프레임)로 복귀한다.

**5. 코드 요구사항**
   *   코드는 단일 파이썬 스크립트 파일로 작성되어야 한다.
   *   누구나 쉽게 이해하고 수정할 수 있도록 주요 기능에 대한 주석을 포함해야 한다.
   *   파일 시스템 접근 및 데이터 처리 시 발생할 수 있는 오류에 대한 적절한 예외 처리를 포함하여 안정적으로 동작해야 한다.
